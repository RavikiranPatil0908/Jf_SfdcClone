/**
 * @description       : 
 * @author            : @vickysahu
 * @group             : 
 * @last modified on  : 11-26-2024
 * @last modified by  : @vickysahu
**/
@RestResource(urlMapping='/AvanseWebhookAPI/V1/*')
global without sharing class AvanseWebhookAPI {

    public static Boolean subventionPrograms = false;
    public static Boolean TenureSelectedForSubvention = false;

    @HttpPost
    global static List<MessageWrapper> trackAvanseLoansStaus(){
        List<MessageWrapper> lstmessageWrapper = new List<MessageWrapper>();
        API_Request__c apiReq = new API_Request__c();
        String requestString = '';
        try {
            RestRequest req = RestContext.request;
            Blob body = req.requestBody;
            requestString = body.toString();
            System.debug('requestString '+requestString);
            AvanseRequestWrapper reqWrapper = AvanseRequestWrapper.parse(requestString);
            apiReq.Request__c = requestString;
            System.debug(reqWrapper);
            //loan id generated by Avanse
            String loan_id ='';
            String amount ='';
            String status ='';
            //loan id generated by System
            String admission_number ='';
            String utr = '';
            String disbursed_amount = '';
            String tenure ='';
            String emi = '';
            String roi = '';
        
            MessageWrapper messageWrapper = null;
            if(String.isNotBlank(reqWrapper.application_no)){
                loan_id = String.valueOf(reqWrapper.application_no);
            }else{
                return returnMessage(apiReq,requestString,'501','Loan id is missing');
            }
            if(reqWrapper.data.loan_amount > 0){
                amount = String.valueOf(reqWrapper.data.loan_amount);
            }else{
                return returnMessage(apiReq,requestString,'501','amount is missing.');
            }
            if(String.isNotBlank(reqWrapper.application_status)){
                status =reqWrapper.application_status;
            }else{
                return returnMessage(apiReq,requestString,'501','status is missing.');
            }
            if(String.isNotBlank(String.valueOf(reqWrapper.data.admission_number))){
                admission_number = String.valueOf(reqWrapper.data.admission_number);
            }else{
                return returnMessage(apiReq,requestString,'501','Admission number is missing.');
            }
            if(reqWrapper.data.utr_details.size() > 0 && String.isNotBlank(reqWrapper.data.utr_details[0].utr_no)) {
                utr = reqWrapper.data.utr_details[0].utr_no;
            }
            if(String.isNotBlank(String.valueOf(reqWrapper.data.disb_amount))) {
                disbursed_amount = String.valueOf(reqWrapper.data.disb_amount);
            }
            if(String.isNotBlank(String.valueOf(reqWrapper.data.tenure))){
                tenure = String.valueOf(reqWrapper.data.tenure);
            }
            if(String.isNotBlank(String.valueOf(reqWrapper.data.emi))) {
                emi = String.valueOf(reqWrapper.data.emi);
            }
            if(String.isNotBlank(String.valueOf(reqWrapper.data.roi))) {
                roi = String.valueOf(reqWrapper.data.roi);
            }   

            System.debug('loan_id-->'+loan_id+' amount-->'+amount+' status-->'+status+' urn-->'+''+' utr-->'+utr + 'admission_number-->' + admission_number);

            List<Opportunity> updateLstOpp=new List<Opportunity>();
            List<Opportunity> lstOpportunity = [select Id,Specialisation__c,Is_Re_Registration_Payment__c,nm_Year__c,ChooseProgram__c,nm_Fee_Type__c,nm_Session__c,EduVanz_last_update_status_date__c,Tenure__c,Loan_Amount__c,Loan_Application_Cancelled__c,Loan_Approved__c,Loan_Order_Status__c,EduVanz_lead_id__c,Loan_Order_Id__c,Account.nm_ChooseaProgram__c ,Account.Program_Type__c,ActualPendingAmount__c,LiveLecturesType__c,CourseList__c from Opportunity where EduVanz_lead_id__c=:loan_id and Loan_Type__c='Avanse' limit 1];
            
            List<Lead> updateLstLead=new List<Lead>();
            List<Lead> lstLead = new List<Lead>();
            if (lstOpportunity.size() > 0) {
                System.debug('lstOpportunity '+lstOpportunity);
                for(Opportunity opp: lstOpportunity){
                    apiReq.Opportunity__c = opp.Id;
                    // if(String.isNotBlank(loan_id)){
                    //     opp.EduVanz_lead_id__c = loan_id;                                    // use the eduvanz field to avoid the creating the new field for same functionality
                    // }
                    if(String.isNotBlank(amount)){
                        opp.Eduvanz_final_sanction_loan_amount__c = amount;                  // use the eduvanz field to avoid the creating the new field for same functionality
                    }
                    if(String.isNotBlank(status)){
                        opp.Loan_Order_Status__c = status;
                        
                        if((status == 'Rejected' || status == 'Credit Rejected') && !opp.Loan_Approved__c ){
                            if (status == 'Credit Rejected') {
                                AvanseWebService objWebService = new AvanseWebService();
                                Boolean isCancel = objWebService.cancelAvanseLoan(opp.EduVanz_lead_id__c, 'Opportunity', opp.Id);
                                System.debug('Loan has been cancelled by API');
                                if (!isCancel) {
                                    LoanCancellationRequestFailedController loanFailed = new LoanCancellationRequestFailedController();
                                    loanFailed.loanCancellation(opp.Id,'Opportunity', 'Loan Cancelation Failed', 'Loan Cancelation Failed');
                                }
                            }
                            status = status == 'Credit Rejected' ? 'Rejected' : status;
                            // call global method to avoid the same code logic
                            String strResult = EduvanzTrackLoanApplicationAPI.cancelLoanApplication('Opportunity',opp.EduVanz_lead_id__c,opp.Id,'Rejected');
                            if(strResult == 'true'){
                                System.debug('Loan application cancelled successfully...');
                                return returnMessage(apiReq,requestString,'200','Webhook API Data updated.');
                            }else{
                                System.debug('Something went wrong while cancel the loan...'+strResult);
                                return returnMessage(apiReq,requestString,'504','Internal Error Occured.');
                            }
                        }else if(status == 'Disbursed' && reqWrapper.data.utr_details.size() > 0){
                            System.debug('subventionProg--'+subventionPrograms +'opp.Account.nm_ChooseaProgram__c --'+opp.Account.nm_ChooseaProgram__c );

                            if(String.isNotBlank(utr) && String.isNotBlank(disbursed_amount)){
                                opp.Loan_Sanctioned__c  = true;
                                String liveLectureType = opp.LiveLecturesType__c;
                                String courseList = opp.CourseList__c;
                                integer loan_amt  = Integer.valueOf(opp.Loan_Amount__c);
                                
                                Tenure__c objTenure = getTenureForSubvention(opp.nm_Fee_Type__c,opp.Account.nm_ChooseaProgram__c,opp.Specialisation__c,opp.Tenure__c);
                                List<String> lstallTermfeeProgram = new List<String>{'MBA - X','MBA (WX)','M.Sc. (AI & ML Ops)','M.Sc. (AI)'}; 
                                if(String.isNotBlank(opp.Specialisation__c) && lstallTermfeeProgram.contains(opp.Specialisation__c) && opp.nm_Fee_Type__c != 'AnnualFee' && opp.nm_Fee_Type__c != 'FullFee'){
                                    opp.nm_Fee_Type__c = 'MBAallTermfee';
                                }
                                System.debug('loan_amt '+loan_amt);
                                if(objTenure!=null && objTenure.Subvention_Value__c > 0){
                                    createAvansePayment(opp.Id,utr,'Opportunity',disbursed_amount,liveLectureType,courseList,null);
                                    createAvanseAndSubventionPayment(utr,opp.Id,'Opportunity',opp.Loan_Amount__c,opp.ActualPendingAmount__c,disbursed_amount,objTenure); 
                                }else{
                                    createAvansePayment(opp.Id,utr,'Opportunity',disbursed_amount,liveLectureType,courseList,null);
                                }
                            }else{
                                return returnMessage(apiReq,requestString,'501','UTR or disbursed_amount is missing.');
                            }    
                        }else if(status =='Ops Under Approval'){
                            opp.Eduvanz_final_sanction_loan_amount__c = amount;                              // use the eduvanz field to avoid the creating the new field for same functionality
                            opp.Loan_Amount__c = amount;
                            // opp.Interest_Rate__c = roi;
                            // opp.EMI_Amount__c = emi;
                            opp.Tenure__c = tenure;
                            if(opp.Loan_Application_Cancelled__c){
                                opp.Loan_Application_Cancelled__c = false;
                            }
                        }
                    }
                    opp.EduVanz_last_update_status_date__c = DateTime.now();                                 // use the eduvanz field to avoid the creating the new field for same functionality
                    updateLstOpp.add(opp);
                }
                if(updateLstOpp.size()>0){

                    System.debug('updateLstOpp-->'+updateLstOpp);
                    try{
                        update updateLstOpp;
                        messageWrapper = new MessageWrapper('200','Webhook API Data updated.');
                        apiReq.Response__c = messageWrapper.toString();
                        apiReq.Type_of_Request__c= 'Avanse';
                        apiReq.API_Name__c='AvanseWebhookAPI';
                        apiReq.Success__c = true;
                    }catch(Exception e){
                        messageWrapper = new MessageWrapper('504',e.getMessage());
                        apiReq.Response__c = messageWrapper.toString();
                        apiReq.Type_of_Request__c= 'Avanse';
                        apiReq.API_Name__c='AvanseWebhookAPI';
                        apiReq.Success__c = false;
                    }
                }
            } else if(lstOpportunity.isEmpty() || lstOpportunity.size() ==0) {
                lstLead = [select Id,EduVanz_last_update_status_date__c,nm_Year__c,nm_Session__c,nm_Fee_Type__c,Loan_Application_Cancelled__c,Loan_Order_Status__c,EduVanz_lead_id__c,Loan_Order_Id__c,nm_ChooseaProgram__c,Program_Type__c,Tenure__c,Loan_Amount__c,LiveLecturesType__c,CourseList__c,nm_InformationCenter__r.ConsumerType__c,nm_Program__c,nm_Program__r.prgst__c from Lead where EduVanz_lead_id__c=:loan_id and Loan_Type__c='Avanse' and IsDeleted = false limit 1];
                for(Lead ld:lstLead){

                    apiReq.Lead__c= ld.Id;
                    // if(String.isNotBlank(loan_id)){
                    //     ld.EduVanz_lead_id__c = loan_id;                                                     // use the eduvanz field to avoid the creating the new field for same functionality
                    // }
                    if(String.isNotBlank(amount)){
                        ld.Eduvanz_final_sanction_loan_amount__c = amount;                                   // use the eduvanz field to avoid the creating the new field for same functionality
                    }
                    if(String.isNotBlank(status)){
                        ld.Loan_Order_Status__c = status;
                        if(status == 'Rejected' || status == 'Credit Rejected'){
                            if (status == 'Credit Rejected') {
                                AvanseWebService objWebService = new AvanseWebService();
                                Boolean isCancel = objWebService.cancelAvanseLoan(ld.EduVanz_lead_id__c, 'Lead', ld.Id);
                                System.debug('Loan has been cancelled by API');
                                if (!isCancel) {
                                    LoanCancellationRequestFailedController loanFailed = new LoanCancellationRequestFailedController();
                                    loanFailed.loanCancellation(ld.Id,'Lead', 'Loan Cancelation Failed', 'Loan Cancelation Failed');
                                }
                            }
                            status = status == 'Credit Rejected' ? 'Rejected' : status;
                            // call global method to avoid the same code logic
                            String strResult = EduvanzTrackLoanApplicationAPI.cancelLoanApplication('Lead',ld.EduVanz_lead_id__c,ld.Id,'Rejected');
                            if(strResult == 'true'){
                                System.debug('Loan application cancelled successfully...');
                                return returnMessage(apiReq,requestString,'200','Webhook API Data updated.');
                            }else{
                                System.debug('Something went wrong while cancel the loan...'+strResult);
                                return returnMessage(apiReq,requestString,'504','Internal Error Occured.');
                            }                                                  
                        }else if(status == 'Disbursed' && reqWrapper.data.utr_details.size() > 0){
                            if(String.isNotBlank(utr) && String.isNotBlank(disbursed_amount)){
                                Tenure__c objTenure = getTenureForSubvention(ld.nm_Fee_Type__c,ld.nm_ChooseaProgram__c,ld.Program_Type__c,ld.Tenure__c);
                                ld.Loan_Sanctioned__c = true;
                                String liveLectureType = ld.LiveLecturesType__c;
                                String courseList = ld.CourseList__c;

                                integer loan_amt  = Integer.valueOf(ld.Loan_Amount__c);
                                if(objTenure!=null && objTenure.Subvention_Value__c > 0){
                                    createAvansePayment(ld.Id,utr,'Lead',disbursed_amount,liveLectureType,courseList,ld);
                                    createAvanseAndSubventionPayment(utr,ld.Id,'Lead',ld.Loan_Amount__c,0,disbursed_amount,objTenure);
                                }else{
                                    createAvansePayment(ld.Id,utr,'Lead',disbursed_amount,liveLectureType,courseList,ld);
                                }
                            }else{
                                return returnMessage(apiReq,requestString,'501','UTR or disbursed_amount is missing.');
                            }
                        }else if(status =='Ops Under Approval'){
                            ld.Eduvanz_final_sanction_loan_amount__c = amount;      // use the eduvanz field to avoid the creating the new field for same functionality  
                            ld.Loan_Amount__c = amount;
                            // ld.Interest_Rate__c = roi;
                            // ld.EMI_Amount__c = emi;
                            ld.Tenure__c = tenure;
                            if(ld.Loan_Application_Cancelled__c){
                                ld.Loan_Application_Cancelled__c = false;
                            }                                                          
                        }
                    }
                    ld.EduVanz_last_update_status_date__c = DateTime.now();                              // use the eduvanz field to avoid the creating the new field for same functionality
                    updateLstLead.add(ld);
                }
                if(updateLstLead.size()>0) {
                    System.debug('updateLstLead-->'+updateLstLead);
                    try{
                        update updateLstLead;
                        messageWrapper = new MessageWrapper('200','Webhook API Data updated.');
                        apiReq.Response__c = messageWrapper.toString();
                        apiReq.Type_of_Request__c= 'Avanse';
                        apiReq.API_Name__c='AvanseWebhookAPI';
                        apiReq.Success__c = true;
                    }catch(Exception e){
                        messageWrapper = new MessageWrapper('504',e.getMessage());
                        apiReq.Response__c = messageWrapper.toString();
                        apiReq.Type_of_Request__c= 'Avanse';
                        apiReq.API_Name__c='AvanseWebhookAPI';
                        apiReq.Success__c = false;
                    }
                }else{
                    return returnMessage(apiReq,requestString,'505','Error, please try again.');            
                }
            }else{
                return returnMessage(apiReq,requestString,'500','URN not matched, please try with different one.');
            }
            lstmessageWrapper.add(messageWrapper);
            apiRequestsInsertion(apiReq);
        } catch(Exception e) {
            System.debug(e);
            //Send an email to the User after your batch completes
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            OrgWideEmailAddress owe = [SELECT id,Address,DisplayName FROM OrgWideEmailAddress WHERE DisplayName = 'NMIMS CDOE' LIMIT 1];
            string[] toAddress = System.Label.setBccAdderess.split(','); 
            if (System.Label.Environment == 'Sandbox') {
                toAddress.clear();
                toAddress.add('vickysahu1454@gmail.com');
            }
            mail.setToAddresses(toAddress);
            mail.setSubject('Avanse Webhook Error');
            String mailBody = 'Hi Team,\n\n'+
            'Please find below Avanse Webhook Error:\n'+
            'Error Line No.: '+ e.getLineNumber() +'\n'+
            'Error Msg: '+ e +'\n\n'+
            'JSON Request: \n' +requestString +'\n\n'+
            'Thanks & Regards' +'\n'+
            'NMIMS CDOE';
            mail.setPlainTextBody(mailBody);
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
        }
        return lstmessageWrapper;
    }

    public static void createAvanseAndSubventionPayment(String UTR,String recordId,String objectType,String Loan_amount,Decimal ActualPendingAmount,String disbursed_amount,Tenure__c objTenure){
        System.debug('createLiquiLoansAndSubventionPayment enter '+' objectType  '+objectType);
        Boolean paymentCreated = false;
        List<nm_Payment__c> nm_pay = [select Id , nm_ModeOfPayment__c , nm_PaymentStatus__c , nm_PaymentType__c from nm_Payment__c where (nm_OpportunityNew__c =: recordId or nm_Lead__c =:recordId) and nm_PaymentType__c = 'Avanse Subvention' and nm_PaymentStatus__c = 'Waived Off' limit 1];    
        if(nm_pay.size()>0){
            paymentCreated = true;
        }

        nm_Payment__c payment = new nm_Payment__c();
        Decimal subvention_amt = 0.0;
        Decimal loan_amt= Decimal.ValueOf(Loan_amount);
        if(objTenure!=null) {
            subvention_amt = ((loan_amt * objTenure.Subvention_Value__c) /100);
        }
        
        // to avoid 3 decimal values in payment 
        String s = String.valueOf(subvention_amt); 
        if(s.contains('.')){
            String afterDecimal = s.substringAfter('.');
            if(Integer.valueOf(afterDecimal)>0.0){
                subvention_amt = subvention_amt.round(System.RoundingMode.UP);
            }
        }
   
        if(objectType == 'Lead'){
            payment.nm_Amount__c=subvention_amt;
            payment.nm_ActualPaymentAmmount__c=subvention_amt;
            payment.nm_PaymentStatus__c ='Waived Off';
            payment.nm_PaymentType__c = 'Avanse Subvention';
            payment.nm_Lead__c=recordId;

        }else if(objectType == 'Opportunity'){
            payment.nm_Amount__c=subvention_amt;
            payment.nm_ActualPaymentAmmount__c=subvention_amt;
            payment.nm_PaymentStatus__c ='Waived Off';
            payment.nm_PaymentType__c = 'Avanse Subvention';
            payment.nm_OpportunityNew__c=recordId;
        }

        if(payment != null && paymentCreated == false && payment.nm_Amount__c > 0){
            System.debug('paymnet record details-->'+payment+'paymentCreated '+paymentCreated);
            try{
                insert payment;
            }catch(DmlException e){
                System.debug(e.getMessage());
            }
        }else{
            System.debug('payment already created --'+paymentCreated);
        }

        if(objTenure!=null && objTenure.Tranche_Payment__c && ActualPendingAmount >0){
            createAdditionalPaymentRecord(ActualPendingAmount,recordId,objectType,disbursed_amount);
        }
    }

    public static void createAdditionalPaymentRecord(Decimal ActualPendingAmount,String recordId,String objectType,String disbursed_amount){
        Boolean paymentCreated = false;
        List<Opportunity> lstOpportunity = new List<Opportunity>();
        if(objectType == 'Opportunity'){
            lstOpportunity = [select Id,Account.Program_Type__c,ActualPendingAmount__c from Opportunity where Id=:recordId and Loan_Type__c='Avanse' limit 1];
        }
        List<nm_Payment__c> nm_pay = [select Id , nm_ModeOfPayment__c , nm_PaymentStatus__c , nm_PaymentType__c from nm_Payment__c where (nm_OpportunityNew__c =: recordId or nm_Lead__c =:recordId) and nm_PaymentType__c = 'Additional Charge' and nm_PaymentStatus__c = 'Waived Off' limit 1];    
        if(nm_pay.size()>0){
            paymentCreated = true;
        }

        nm_Payment__c payment = new nm_Payment__c();
        if(objectType == 'Lead'){
            payment.nm_Amount__c= ActualPendingAmount;
            payment.nm_ActualPaymentAmmount__c=ActualPendingAmount;
            payment.nm_PaymentStatus__c ='Waived Off';
            payment.nm_PaymentType__c = 'Additional Charge';
            payment.nm_Lead__c=recordId; 

        }else if(objectType == 'Opportunity'){
           // payment.nm_Amount__c= lstOpportunity[0].ActualPendingAmount__c;
           // payment.nm_ActualPaymentAmmount__c= lstOpportunity[0].ActualPendingAmount__c;
            payment.nm_Amount__c= Integer.valueof(disbursed_amount);
            payment.nm_ActualPaymentAmmount__c=  Integer.valueof(disbursed_amount);
            payment.nm_PaymentStatus__c ='Waived Off';
            payment.nm_PaymentType__c = 'Additional Charge';
            payment.nm_OpportunityNew__c=recordId;
        }

        if(payment != null && paymentCreated == false && payment.nm_Amount__c > 0){
            System.debug('paymnet record details-->'+payment+'paymentCreated '+paymentCreated);
            try{
                insert payment;
            }catch(DmlException e){
                System.debug(e.getMessage());
            }
        }else{
            System.debug('payment already created --'+paymentCreated);
        }
    }

    public static void createAvansePayment(String recordId,String UTR ,String objectType,String amount,String liveLectureType,String courseList,Lead ld){
        Boolean paymentCreated = false;
        System.debug('createAvansePayment enter');
        Decimal loan_amt= Decimal.ValueOf(amount);
        List<nm_Payment__c> lstPaymentToInsert = new List<nm_Payment__c>();
        if(String.isNotBlank(liveLectureType) && liveLectureType!='No') {
            Decimal liveLectureAmount = 0;
            nm_Payment__c liveLecturePayment = EduvanzTrackLoanApplicationAPI.createLiveLecturePayment(recordId,UTR,objectType,Decimal.valueOf(amount),liveLectureType,courseList,ld,'NEFT - Avanse');
            loan_amt = Decimal.valueOf(amount) - liveLecturePayment.nm_Amount__c;
            lstPaymentToInsert.add(liveLecturePayment);
        }

        nm_Payment__c payment = new nm_Payment__c();
        Decimal disbursed_amount= Decimal.ValueOf(amount);
        if(objectType == 'Lead' && loan_amt > 0){
            payment.nm_ModeOfPayment__c = 'NEFT - Avanse';
            payment.nm_Amount__c= loan_amt;
            payment.nm_ActualPaymentAmmount__c = loan_amt;
            payment.nm_PaymentStatus__c ='Payment Made';
            payment.nm_PaymentType__c = 'Admission';
            payment.nm_Merchant_Track_Id__c = UTR;
            payment.nm_Lead__c=recordId;
           
        }else if(objectType == 'Opportunity' && loan_amt > 0){
            payment.nm_ModeOfPayment__c = 'NEFT - Avanse';
            payment.nm_Amount__c = loan_amt;
            payment.nm_ActualPaymentAmmount__c = loan_amt;
            payment.nm_PaymentStatus__c ='Payment Made';
            payment.nm_PaymentType__c = 'Admission';
            payment.nm_Merchant_Track_Id__c = UTR;
            payment.nm_OpportunityNew__c=recordId;
        }
        if(payment != null && payment.nm_Amount__c > 0){        
            lstPaymentToInsert.add(payment);
        }
        System.debug('paymentCreated '+paymentCreated+' payment '+lstPaymentToInsert.size());
        if(lstPaymentToInsert.size() > 0 && paymentCreated == false){
            System.debug('paymnet record details-->'+payment+'paymentCreated '+paymentCreated);
            try{
                List<nm_Payment__c> nm_pay = [select Id , nm_ModeOfPayment__c , nm_PaymentStatus__c , nm_PaymentType__c from nm_Payment__c where (nm_OpportunityNew__c =: recordId or nm_Lead__c =:recordId) and nm_ModeOfPayment__c ='NEFT - Avanse' and nm_PaymentType__c!='Live Lectures' and ( nm_PaymentStatus__c ='Payment Made' or nm_PaymentStatus__c ='Payment Approved' ) limit 1];    
                if(nm_pay.size()>0){
                    paymentCreated = true;
                }
                insert lstPaymentToInsert;
            }catch(DmlException e){
                System.debug(e.getMessage());
            }
        }else{
            System.debug('payment already created --'+paymentCreated);
        }
    }

    public static Tenure__c getTenureForSubvention(String feeType,String chooseProgram,String Program_Type,String Tenure) {
        feeType = feeType == 'MBAallTermfee' || feeType == 'ReRegistrationPayment' ? 'Admission' : feeType;
        String key = chooseProgram+'-'+Program_Type+'-Avanse-'+feeType;
        System.debug('key----> '  +key);
        List<Tenure__c> lstTenures = [SELECT id,Subvention_Value__c,Tranche_Payment__c FROM Tenure__c WHERE Key__c=:key AND Tenure__c=:Tenure AND IsActive__c=true LIMIT 1];
        if(lstTenures.size() > 0 && lstTenures[0].Subvention_Value__c > 0) {
            return lstTenures[0];
        }
        return null;
    }

    public static List<MessageWrapper> returnMessage(API_Request__c apiReq, String requestString, String code, String msg) {
        if(apiReq==null) {
            apiReq = new API_Request__c();
        }
        MessageWrapper messageWrapper = new MessageWrapper(code,msg);
        List<MessageWrapper> lstmessageWrapper = new List<MessageWrapper>{messageWrapper};
        apiReq.Request__c = requestString;
        apiReq.Response__c = messageWrapper.toString();
        apiReq.Type_of_Request__c= 'AvanseLoan';
        apiReq.API_Name__c='AvanseWebhookAPI';
        apiReq.Success__c = code == '200' ? true : false;
        apiRequestsInsertion(apiReq);
        return lstmessageWrapper;
    }

    public static void apiRequestsInsertion(API_Request__c apiRequest){
        if(apiRequest != null){
            try {
                insert apiRequest;
            } catch (DmlException e) {
                System.debug(e.getMessage());
            }
        }
    }

    global class MessageWrapper{

        public String responseCode;
        public String message;        
        global MessageWrapper(String responseCode,String message){
            this.responseCode = responseCode;
            this.message = message;
        }
    }
    
}