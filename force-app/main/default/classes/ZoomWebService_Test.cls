/*Code generated by ForceXtra.com */
@isTest//(SeeAllData=true)
private class ZoomWebService_Test
{
    private class RestMock implements HttpCalloutMock {

        public String method;

        RestMock() {
            method ='';
        }

        public HTTPResponse respond(HTTPRequest req) {
            Integer StatusCode = 201;
            String fullJson = '{"uuid":"i7pLNRJBSmW7OT7LSkpcow==","id":369201743,"host_id":"XW4NHyiHS4yfzslHZ32cyg","topic":"Interview","type":2,"status":"waiting","start_time":"2019-06-23T06:30:00Z","duration":10,"timezone":"Asia/Kolkata","agenda":"Interview Meeting","created_at":"2019-05-23T05:49:28Z","start_url":"https://ngasce.zoom.us/s/369201743?zak=eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjbGllbnQiLCJ1aWQiOiJYVzROSHlpSFM0eWZ6c2xIWjMyY3lnIiwiaXNzIjoid2ViIiwic3R5IjoxMDAsIndjZCI6ImF3MSIsImNsdCI6MCwic3RrIjoiUGxzWVJ2cEFDZ0V0RW55TW95RmtuaFJoV2Rkb0FoTmNEdFFzRnF5aTB3MC5CZ1VnZW1sck9WZENSREl4U3poS1IzQlFZaTgzTm1GNU4wRnBObG8yVWxCUFNYcEFZVFk0WW1GaU5EVXhPVGs1WkRSbE0yTTBaRGt6WWpJNE1EWTJabUV4TWpRd1pqRXdNalEzWWprNFl6ZzROakU0TUdKaE0yVTJORFk0WkdNeE5qa3daUUFNTTBOQ1FYVnZhVmxUTTNNOUFBTmhkekUiLCJleHAiOjE1NTg1OTc3NjgsImlhdCI6MTU1ODU5MDU2OCwiYWlkIjoiN1VfVlgtZnRRclNwRHpSSEgxUXVidyIsImNpZCI6IiJ9.-6MzTVOtn-0lHf7YSInAKXgBj7bg277kwhjEWwiIChY","join_url":"https://ngasce.zoom.us/j/369201743","settings":{"host_video":true,"participant_video":true,"cn_meeting":false,"in_meeting":true,"join_before_host":false,"mute_upon_entry":false,"watermark":false,"use_pmi":false,"approval_type":2,"audio":"voip","auto_recording":"none","enforce_login":false,"enforce_login_domains":"","alternative_hosts":"","close_registration":false,"registrants_confirmation_email":true,"waiting_room":false,"global_dial_in_countries":["US"]}}';
            if(method == 'failed') {
                fullJson = '{"TXNID":"20180927111212800110168666800020875","BANKTXNID":"","ORDERID":"2015101253010087","TXNAMOUNT":"100.12","STATUS":"TXN_FAILURE","TXNTYPE":"SALE","RESPCODE":"810","RESPMSG":"Txn Failed","MID":"'+Label.Paytm_Merchant_Key+'","REFUNDAMT":"0.0","TXNDATE":"2018-09-27 10:07:15.0"}';
                StatusCode = 400;
            }else if(method == 'deleteSuccess') {
                StatusCode = 204;
            }else if (method == 'deleteFailed') {
                fullJson = '{"code": 3001,"message": "Meeting 339543942 is not found or has expired."}';
                StatusCode = 404;
            }else if (method == 'upcomingMeeting') {
                fullJson ='{"page_size":300,"total_records":2,"next_page_token":"","meetings":[{"uuid":"PsNb+uTOTSyKZS4","id":8691,"host_id":"Z__Ixb7JSl-Ise0","topic":"Online Meeting","type":2,"start_time":"2024-05-11T12:00:00Z","duration":15,"timezone":"Asia/Kolkata","agenda":"Video Verification Survey","created_at":"2024-05-10T04:02:25Z","join_url":"https://ngasce.zoom.us/j/8691"}]}';
                StatusCode = 200;
            }
            else if (method == 'getAccessToken') {
                fullJson ='{"access_token":"ytfdfghjhjjj","token_type":"bearer","expires_in":3600,"scope":"test"}'; 
                StatusCode = 200;
            }
            else if (method == 'getRecording') {
                fullJson ='{"uuid":"UVb7vI1NRayKqLbgeNw==","id":823827476,"account_id":"","host_id":"","topic":"Online Meeting","type":2,"start_time":"2024-06-11T05:29:17Z","timezone":"Asia/Kolkata","host_email":"Zoom51@nmims.edu","duration":0,"total_size":1569317,"recording_count":3,"share_url":"4AzMteexREr6","recording_files":[{"id":"e0020539-969e-4242-9933-ffc2d9a9f099","meeting_id":"UVb7vI1NRa==","recording_start":"2024-06-11T05:29:28Z","recording_end":"2024-06-11T05:30:12Z","file_type":"MP4","file_extension":"MP4","file_size":875973,"play_url":"ynxvkX3FTXAeBxOa","download_url":"heBxOa","status":"completed","recording_type":"shared_screen_with_speaker_view"}],"password":"","recording_play_passcode":""}'; 
                StatusCode = 200;
            }
            else if (method == 'getMeeting') {
                fullJson = '{"uuid":"liqyvOlxS1yo1BtNwC6XVQ==","id":81015845901,"host_id":"Z__Ixb7JSl-Ise0YcCMaCg","host_email":"Zoom51@nmims.edu","assistant_id":"","topic":"Video Verification","type":2,"status":"waiting","start_time":"2024-08-26T03:30:00Z","duration":15,"timezone":"Asia/Kolkata","agenda":"Video Verification Survey","created_at":"2024-08-24T07:13:34Z","start_url":"https://ngasce.zoom.us/s/810158401?zak=eyJ0eXA3NrbSI6I82d35WQ8qpZzU","join_url":"https://ngasce.zoom.us/j/81015845901","settings":{"host_video":true,"participant_video":true,"cn_meeting":false,"in_meeting":true,"join_before_host":false,"jbh_time":0,"mute_upon_entry":true,"watermark":false,"use_pmi":false,"approval_type":2,"audio":"voip","auto_recording":"cloud","enforce_login":false,"enforce_login_domains":"","alternative_hosts":"","alternative_host_update_polls":false,"close_registration":false,"show_share_button":false,"allow_multiple_devices":false,"registrants_confirmation_email":true,"waiting_room":false,"request_permission_to_unmute_participants":false,"registrants_email_notification":true,"meeting_authentication":false,"encryption_type":"enhanced_encryption","approved_or_denied_countries_or_regions":{"enable":false},"question_and_answer":{"enable":false},"breakout_room":{"enable":false},"internal_meeting":false,"continuous_meeting_chat":{"enable":false,"auto_add_invited_external_users":false},"participant_focused_meeting":false,"push_change_to_calendar":false,"resources":[],"auto_start_meeting_summary":false,"auto_start_ai_companion_questions":false,"alternative_hosts_email_notification":true,"show_join_info":false,"device_testing":false,"focus_mode":false,"meeting_invitees":[],"enable_dedicated_group_chat":false,"private_meeting":false,"email_notification":true,"host_save_video_order":false,"sign_language_interpretation":{"enable":false},"email_in_attendee_report":false},"pre_schedule":false}';
                StatusCode = 200;
            }
            HTTPResponse res = new HTTPResponse();
            res.setHeader('Content-Type', 'application/x-www-form-urlencoded');
            res.setBody(fullJson);
            res.setStatusCode(StatusCode);
            return res;
        }
    }

    //Initial Test Data
    //Add Logic to Create data required
    static ZoomWebService instance = null;
    static void SetUp(){
        test.StartTest();
        instance = new ZoomWebService();
        
    }

    //Tear Down 
    //Add Logic to delete data that has been created
    static void TearDown(){
        test.StopTest();
    }
    
    public static testmethod void Test_AllContructors(){
        SetUp();
        ZoomWebService instance1 = new ZoomWebService();
        TearDown();
    }

    // Test Method: createMeeting
    public static testmethod void Test_createMeeting(){
        SetUp();
        Test.setMock(HttpCalloutMock.class, new RestMock());
        string datetimest = '2019-06-29T20:00:00';
        string topic = 'Interview';
        string agenda = 'Interview Slot';
        Boolean joinBeforeHost = false;
        String autoRecording = 'cloud';
        Integer duration = 15;
        String token = 'gdgdhjksksl';
        Map<String,String> mapOfResponsehostUrl = instance.createMeeting(datetimest, topic, agenda, 'Zoom18@nmims.edu',joinBeforeHost,duration,autoRecording,token);
        // TODO : Change following Assert Statement
        System.Assert(mapOfResponsehostUrl.containsKey('start_url'));
        TearDown();
    }

    public static testmethod void Test_createMeetingForFailedResponse(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'failed';
        Test.setMock(HttpCalloutMock.class, rest);

        string datetimest = '2019-06-29T20:00:00';
        string topic = 'Interview';
        string agenda = 'Interview Slot';
        Boolean joinBeforeHost = false;
        String autoRecording = 'cloud';
        Integer duration = 15;
        String token = 'gdgdhjksksl';
        Map<String,String> mapOfResponsehostUrl = instance.createMeeting(datetimest, topic, agenda, 'Zoom18@nmims.edu',joinBeforeHost,duration,autoRecording,token);
        // TODO : Change following Assert Statement);
        // TODO : Change following Assert Statement
        System.Assert(mapOfResponsehostUrl.containsKey('Error'));
        TearDown();
    }

    public static testmethod void Test_deleteMeeting(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'deleteSuccess';
        Test.setMock(HttpCalloutMock.class, rest);

        string meetingId = '201906292';
        String token = 'gdgdhjksksl';
        Boolean checkDeleted = instance.deleteMeeting(meetingId,token);
        // TODO : Change following Assert Statement
        System.Assert(checkDeleted);
        TearDown();
    }

    public static testmethod void Test_deleteMeetingFailedResponse(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'deleteFailed';
        Test.setMock(HttpCalloutMock.class, rest);

        string meetingId = '201906292';
        String token = 'gdgdhjksksl';
        Boolean checkDeleted = instance.deleteMeeting(meetingId,token);
        // TODO : Change following Assert Statement
        System.Assert(!checkDeleted);
        TearDown();
    }

    public static testmethod void Test_getAccessToken(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'getAccessToken';
        Test.setMock(HttpCalloutMock.class, rest);

        String token = instance.getAccessToken();
        // TODO : Change following Assert Statement
        System.Assert(String.IsNotBlank(token));
        TearDown();
    }

    public static testmethod void Test_getUpcomingMeeting(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'upcomingMeeting';
        Test.setMock(HttpCalloutMock.class, rest);
        String minDate = '2024-05-08';
        String maxDate = '2024-05-08'; 
        string meetingId = '201906292';
        String token = 'gdgdhjksksl';
        ScheduledMettingsWrapper mapOfResponseParameters = instance.getListOfScheduledMeetings(minDate,maxDate,300,'Zoom18@nmims.edu',token);
        // TODO : Change following Assert Statement
        System.Assert(mapOfResponseParameters != null);
        TearDown();
    }

    public static testmethod void Test_getRecording(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'getRecording';
        Test.setMock(HttpCalloutMock.class, rest);
        string meetingId = '201906292';
        String token = 'gdgdhjksksl';
        ZoomRecordingWrapper mapOfResponseParameters = instance.getMeetingRecording(meetingId,token);
        // TODO : Change following Assert Statement
        System.Assert(mapOfResponseParameters != null);
        TearDown();
    }

    public static testmethod void Test_getMeeting(){
        SetUp();

        RestMock rest = new RestMock();
        rest.method = 'getMeeting';
        Test.setMock(HttpCalloutMock.class, rest);
        string meetingId = '201906293';
        String token = 'gdgdhjksksl';
        String url = instance.getZoomMeetingHostUrl(meetingId,token);
        // TODO : Change following Assert Statement
        System.Assert(url != '');
        TearDown();
    }
    
}